Metadata-Version: 2.1
Name: marvin
Version: 2.3.1
Summary: A lightweight AI engineering toolkit for building natural language interfaces that are reliable, scalable, and easy to trust.
License: Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Code, https://github.com/prefecthq/marvin
Project-URL: Documentation, https://www.askmarvin.ai
Keywords: ai,chatbot,llm,NLP,natural language processing
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: cachetools >=5
Requires-Dist: fastapi
Requires-Dist: httpx >=0.24.1
Requires-Dist: jinja2 >=3.1.2
Requires-Dist: jsonpatch >=1.33
Requires-Dist: openai >=1.4.0
Requires-Dist: prompt-toolkit >=3.0.33
Requires-Dist: pydantic >=2.4.2
Requires-Dist: pydantic-settings
Requires-Dist: rich >=12
Requires-Dist: tiktoken >=0.4.0
Requires-Dist: typer >=0.9.0
Requires-Dist: typing-extensions >=4.0.0
Requires-Dist: tzdata >=2023.3
Requires-Dist: uvicorn >=0.22.0
Requires-Dist: partialjson >=0.0.5
Provides-Extra: audio
Requires-Dist: SpeechRecognition >=3.10 ; extra == 'audio'
Requires-Dist: PyAudio >=0.2.11 ; extra == 'audio'
Requires-Dist: playsound >=1.0 ; extra == 'audio'
Requires-Dist: wheel >=0.43.0 ; extra == 'audio'
Requires-Dist: PyObjC ; extra == 'audio'
Requires-Dist: pydub >=0.25 ; extra == 'audio'
Requires-Dist: simpleaudio >=1.0 ; extra == 'audio'
Provides-Extra: chromadb
Requires-Dist: chromadb ; extra == 'chromadb'
Provides-Extra: dev
Requires-Dist: marvin[tests] ; extra == 'dev'
Requires-Dist: black[jupyter] ; extra == 'dev'
Requires-Dist: ipython ; extra == 'dev'
Requires-Dist: mkdocs-autolinks-plugin ~=0.7 ; extra == 'dev'
Requires-Dist: mkdocs-awesome-pages-plugin ~=2.8 ; extra == 'dev'
Requires-Dist: mkdocs-markdownextradata-plugin ~=0.2 ; extra == 'dev'
Requires-Dist: mkdocs-jupyter >=0.24.1 ; extra == 'dev'
Requires-Dist: mkdocs-material[imaging] >=9.1.17 ; extra == 'dev'
Requires-Dist: mkdocstrings[python] ~=0.22 ; extra == 'dev'
Requires-Dist: pdbpp ~=0.10 ; extra == 'dev'
Requires-Dist: pre-commit <4.0,>=2.21 ; extra == 'dev'
Requires-Dist: pydantic[dotenv] ; extra == 'dev'
Requires-Dist: ruff ; extra == 'dev'
Provides-Extra: generator
Requires-Dist: datamodel-code-generator >=0.20.0 ; extra == 'generator'
Provides-Extra: prefect
Requires-Dist: prefect >=2.14.9 ; extra == 'prefect'
Provides-Extra: slackbot
Requires-Dist: marvin[prefect] ; extra == 'slackbot'
Requires-Dist: numpy ; extra == 'slackbot'
Requires-Dist: marvin[chromadb] ; extra == 'slackbot'
Provides-Extra: tests
Requires-Dist: pytest-asyncio !=0.22.0,<0.23.0,>=0.18.2 ; extra == 'tests'
Requires-Dist: pytest-env <2.0,>=0.8 ; extra == 'tests'
Requires-Dist: pytest-rerunfailures <14,>=10 ; extra == 'tests'
Requires-Dist: pytest-sugar <2.0,>=0.9 ; extra == 'tests'
Requires-Dist: pytest ~=7.3.1 ; extra == 'tests'
Requires-Dist: pytest-timeout ; extra == 'tests'
Requires-Dist: pytest-xdist ; extra == 'tests'
Provides-Extra: video
Requires-Dist: opencv-python >=4.5 ; extra == 'video'

<p align="center">
  <img src="docs/assets/images/heroes/it_hates_me_hero.png" style="width: 95%; height: auto;"/>
</p>

[![PyPI version](https://badge.fury.io/py/marvin.svg)](https://badge.fury.io/py/marvin)
[![Docs](https://img.shields.io/badge/docs-askmarvin.ai-blue)](https://www.askmarvin.ai)
[![Twitter Follow](https://img.shields.io/twitter/follow/AskMarvinAI?style=social)](https://twitter.com/AskMarvinAI)

# Marvin

### The AI engineering toolkit

Marvin is a lightweight AI toolkit for building natural language interfaces that are reliable, scalable, and easy to trust.

Each of Marvin's tools is simple and self-documenting, using AI to solve common but complex challenges like entity extraction, classification, and generating synthetic data. Each tool is independent and incrementally adoptable, so you can use them on their own or in combination with any other library. Marvin is also multi-modal, supporting both image and audio generation as well using images as inputs for extraction and classification.

Marvin is for developers who care more about _using_ AI than _building_ AI, and we are focused on creating an exceptional developer experience. Marvin users should feel empowered to bring tightly-scoped "AI magic" into any traditional software project with just a few extra lines of code.

Marvin aims to merge the best practices for building dependable, observable software with the best practices for building with generative AI into a single, easy-to-use library. It's a serious tool, but we hope you have fun with it.

Marvin is open-source, free to use, and made with 💙 by the team at [Prefect](https://www.prefect.io/).

## Installation

Install the latest version with `pip`:

```bash
pip install marvin -U
```

To verify your installation, run `marvin version` in your terminal.

## Tools

Marvin consists of a variety of useful tools, all designed to be used independently. Each one represents a common LLM use case, and packages that power into a simple, self-documenting interface.

### General

🦾 [Write custom AI-powered functions](https://askmarvin.ai/docs/text/functions) without source code

### Text

🏷️ [Classify text](https://askmarvin.ai/docs/text/classification) into categories

🔍 [Extract structured entities](https://askmarvin.ai/docs/text/extraction) from text

🪄 [Transform text](https://askmarvin.ai/docs/text/transformation) into structured data

✨ [Generate synthetic data](https://askmarvin.ai/docs/text/generation) from a schema

### Images

🖼️ [Create images](https://askmarvin.ai/docs/images/generation) from text or functions

📝 [Describe images](https://askmarvin.ai/docs/vision/captioning) with natural language

🏷️ [Classify images](https://askmarvin.ai/docs/vision/classification) into categories

🔍 [Extract structured entities](https://askmarvin.ai/docs/vision/extraction) from images

🪄 [Transform images](https://askmarvin.ai/docs/vision/transformation) into structured data

### Audio

💬 [Generate speech](https://askmarvin.ai/docs/audio/speech) from text or functions

✍️ [Transcribe speech](https://askmarvin.ai/docs/audio/transcription) from recorded audio

🎙️ [Record users](https://askmarvin.ai/docs/audio/recording) continuously or as individual phrases

### Video

🎙️ [Record video](https://askmarvin.ai/docs/video/recording) continuously

### Interaction

🤖 [Chat with assistants](https://askmarvin.ai/docs/interactive/assistants) and use custom tools

🧭 [Build applications](https://askmarvin.ai/docs/interactive/applications) that manage persistent state

# Quickstart

Here's a whirlwind tour of a few of Marvin's main features. For more information, [check the docs](https://askmarvin.ai/welcome/what_is_marvin/)!

## 🏷️ Classify text

Marvin can `classify` text using a set of labels:

```python
import marvin

marvin.classify(
    "Marvin is so easy to use!",
    labels=["positive", "negative"],
)

#  "positive"
```

Learn more about classification [here](https://askmarvin.ai/docs/text/classification).

## 🔍 Extract structured entities

Marvin can `extract` structured entities from text:

```python
import pydantic


class Location(pydantic.BaseModel):
    city: str
    state: str


marvin.extract("I moved from NY to CHI", target=Location)

# [
#     Location(city="New York", state="New York"),
#     Location(city="Chicago", state="Illinois")
# ]
```

Almost all Marvin functions can be given `instructions` for more control. Here we extract only monetary values:

```python
marvin.extract(
    "I paid $10 for 3 tacos and got a dollar and 25 cents back.",
    target=float,
    instructions="Only extract money"
)

#  [10.0, 1.25]
```

Learn more about entity extraction [here](https://askmarvin.ai/docs/text/extraction).


## ✨ Generate data

Marvin can `generate` synthetic data for you, following instructions and an optional schema:

```python
class Location(pydantic.BaseModel):
    city: str
    state: str


marvin.generate(
    n=4,
    target=Location,
    instructions="cities in the United States named after presidents"
)

# [
#     Location(city='Washington', state='District of Columbia'),
#     Location(city='Jackson', state='Mississippi'),
#     Location(city='Cleveland', state='Ohio'),
#     Location(city='Lincoln', state='Nebraska'),
# ]
```

Learn more about data generation [here](https://askmarvin.ai/docs/text/generation).

## 🪄 Standardize text by casting to types

Marvin can `cast` arbitrary text to any Python type:

```python
marvin.cast("one two three", list[int])

#  [1, 2, 3]
```

This is useful for standardizing text inputs or matching natural language to a schema:

```python
class Location(pydantic.BaseModel):
    city: str
    state: str


marvin.cast("The Big Apple", Location)

# Location(city="New York", state="New York")
```

For a class-based approach, Marvin's `@model` decorator can be applied to any Pydantic model to let it be instantiated from text:

```python
@marvin.model
class Location(pydantic.BaseModel):
    city: str
    state: str


Location("The Big Apple")

# Location(city="New York", state="New York")
```

Learn more about casting to types [here](https://askmarvin.ai/docs/text/transformation).

## 🦾 Build AI-powered functions

Marvin functions let you combine any inputs, instructions, and output types to create custom AI-powered behaviors... without source code. These functions can can go well beyond the capabilities of `extract` or `classify`, and are ideal for complex natural language processing or mapping combinations of inputs to outputs.

```python
@marvin.fn
def sentiment(text: str) -> float:
    """
    Returns a sentiment score for `text`
    between -1 (negative) and 1 (positive).
    """

sentiment("I love working with Marvin!") # 0.8
sentiment("These examples could use some work...") # -0.2
```

Marvin functions look exactly like regular Python functions, except that you don't have to write any source code. When these functions are called, an AI interprets their description and inputs and generates the output.

Note that Marvin does NOT work by generating or executing source code, which would be unsafe for most use cases. Instead, it uses the LLM itself as a "runtime" to predict function outputs. That's actually the source of its power: Marvin functions can handle complex use cases that would be difficult or impossible to express as code.

You can learn more about functions [here](https://www.askmarvin.ai/docs/text/functions/).

## 🖼️ Generate images from text

Marvin can `paint` images from text:

```python
marvin.paint("a simple cup of coffee, still warm")
```

<p align="center">
  <img src="docs/assets/images/docs/images/coffee.png" style="width: 50%; height: auto;"/>
</p>

Learn more about image generation [here](https://askmarvin.ai/docs/images/generation).

## 🔍 Classify images (beta)

In addition to text, Marvin has beta support for captioning, classifying, transforming, and extracting entities from images using the GPT-4 vision model:

```python
marvin.beta.classify(
    marvin.Image("docs/images/coffee.png"),
    labels=["drink", "food"],
)

# "drink"
```

## Record the user, modify the content, and play it back

Marvin can transcribe speech and generate audio out-of-the-box, but the optional `audio` extra provides utilities for recording and playing audio.

```python
import marvin
import marvin.audio

# record the user
user_audio = marvin.audio.record_phrase()

# transcribe the text
user_text = marvin.transcribe(user_audio)

# cast the language to a more formal style
ai_text = marvin.cast(user_text, instructions='Make the language ridiculously formal')

# generate AI speech
ai_audio = marvin.speak(ai_text)

# play the result
ai_audio.play()
```

# Get in touch!

💡 **Feature idea?** share it in the `#development` channel in [our Discord](https://discord.com/invite/Kgw4HpcuYG).

🐛 **Found a bug?** feel free to [open an issue](https://github.com/PrefectHQ/marvin/issues/new/choose).

👷 **Feedback?** Marvin is under active development, and we'd love to [hear it](https://github.com/PrefectHQ/marvin/discussions).
